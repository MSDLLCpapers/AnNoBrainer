import openslide
from abc import ABC
from pathlib import Path
import tifffile
from PIL import Image, ImageQt

class HandleSlides(ABC):
    def return_max_resolution(self):
        raise NotImplementedError

    def return_nr_of_layers(self):
        raise NotImplementedError

    def return_layer_resolution(self, layer_nr):
        raise NotImplementedError

    def return_downsamples(self):
        raise NotImplementedError

    def save_thumbnail(self, file_path):
        raise NotImplementedError

    def extract_xth_layer(self, layer_nr):
        raise NotImplementedError

    def return_metadata(self):
        raise NotImplementedError


class HandleSingleSvs(HandleSlides):
    def __init__(self, file_path):
        self.file_path = Path(file_path)
        self.resolution = None
        self.nr_of_layers = None
        self.svs_ptr = openslide.OpenSlide(file_path)
        self.thumbnail = None

    def return_nr_of_layers(self):
        return self.svs_ptr.level_count

    def extract_xth_layer(self, layer_nr, width=None):
        total_layer_nr = self.return_nr_of_layers()
        if total_layer_nr < layer_nr:
            raise ValueError
        layer_size = self.svs_ptr.level_dimensions[layer_nr]
        pil_layer_image = self.svs_ptr.read_region((0, 0), layer_nr, layer_size)
        if width:
            height = int(width * layer_size[1] / layer_size[0])
            pil_layer_image = pil_layer_image.resize((width, height), Image.ANTIALIAS)
        return pil_layer_image

    def extract_last_layer_pil(self, width=None):
        self.thumbnail = ImageQt.ImageQt(self.extract_xth_layer(self.return_nr_of_layers()-1, width))

    def return_filename(self):
        return self.file_path.name

    def return_downsamples(self):
        return self.svs_ptr.level_downsamples

    def return_layer_resolution(self, layer_nr):
        return self.svs_ptr.level_dimensions[layer_nr]

    def return_max_resolution(self):
        return self.svs_ptr.level_dimensions[0]

    def save_thumbnail(self, save_file_path, width=None):
        thumbnail_layer_nr = self.return_nr_of_layers()-1  # counted from zero
        min_layer_resolution = self.return_layer_resolution(thumbnail_layer_nr)
        pil_thumbnail_image = self.svs_ptr.read_region((0, 0), thumbnail_layer_nr, min_layer_resolution)
        if width:
            height = width * min_layer_resolution[1] / min_layer_resolution[0]
            pil_thumbnail_image.resize(width, height, Image.ANTIALIAS)
        Path(save_file_path).with_suffix('.tif')  # use tif extension for the thumbnail
        pil_thumbnail_image.save(save_file_path)

    def return_metadata(self):
        return dict(self.svs_ptr.properties)


class HandleSingleTiff(HandleSlides):
    def __init__(self, file_path):
        self.file_path = Path(file_path)
        self.resolution = None
        self.nr_of_layers = None
        self.tiff_ptr = tifffile.TiffFile(file_path)

    def return_max_resolution(self):
        return self.tiff_ptr.pages.pages[0].shape

    def return_nr_of_layers(self):
        return len(self.tiff_ptr.series)

    def return_layer_resolution(self, layer_nr):
        raise len(self.tiff_ptr.pages[layer_nr].shape)

    def return_downsamples(self):
        raise NotImplementedError

    def save_thumbnail(self, file_path, channel_name=None):
        if channel_name is not None:
            ihc_scale, page_to_load = self.parse_img_metadata(channel_name)
        else:
            ihc_scale = 0
            page_to_load = 0
        ihc_np = self.tiff_ptr.pages[page_to_load].asarray()
        tifffile.imsave(file_path, ihc_np)

    def parse_img_metadata(self, channel_name):
        """
        a custom function to get layer name from the xml metadata.
        Applicable only on IHC images generated by Indica Labs, Inc. software!
        :return:
        """
        try:
            tif_layer = 0
            tif_meta = self.return_metadata()
            tif_channels = tif_meta["indica"]["image"]["channels"]["channel"]
            channel_page = 0
            for channel in tif_channels:
                if channel["name"] == channel_name:
                    channel_page = channel["id"]
                    break
            page_to_load = tif_layer * len(tif_channels) + channel_page
            ihc_scale = self.tiff_ptr.pages[0].shape[0] / self.tiff_ptr.pages[page_to_load].shape[0]
            return ihc_scale, page_to_load

        except KeyError:
            print("Key Error")
        except ValueError:
            print("Value Error")
        except ZeroDivisionError:
            print("Value Error")
        except Exception:
            raise KeyError("Don't know what happened")

    def extract_xth_layer(self, layer_nr):
        raise NotImplementedError

    def return_metadata(self):
        return tifffile.xml2dict(self.tiff_ptr.pages[0].description)


class HandleMultipleSvs:
    """
    Class to extract layers from multiple slides. The slides have to have same number of layers.
    """
    def __init__(self, folder_path):
        self.folder_path = Path(folder_path)
        print(type(self.folder_path))
        print(self.folder_path.iterdir())
        self.svs_files = [HandleSingleSvs(str(file_path)) for file_path in
                          self.folder_path.iterdir() if file_path.suffix == '.svs']
        self.verify_slides_layers()

    def verify_slides_layers(self):
        nr_of_layers = self.svs_files[0].return_nr_of_layers()
        for svs_file in self.svs_files:
            if svs_file.return_nr_of_layers() != nr_of_layers:
                raise TypeError("Layer is not consistent across files in the folder!")
        return True

    def extract_xth_layer(self, layer_nr, target_folder):
        for svs_file in self.svs_files:
            path_to_image = Path(*[target_folder, svs_file.return_filename()])
            if path_to_image.is_file():
                raise ValueError("File already exists! Not rewriting!")
        print("Writing!")
        for svs_file in self.svs_files:
            path_to_save = Path(*[target_folder, svs_file.return_filename()])
            path_to_save = path_to_save.with_suffix('.tif')
            image_array = svs_file.extract_xth_layer(layer_nr)
            print(str(path_to_save))
            image_array.save(str(path_to_save))


class HandlePng(HandleSlides):
    def __init__(self, input_file_path):
        self.file_path = input_file_path
        self.png_image = None
        self.resized_image = None

    def load_png(self):
        self.png_image = Image.open(str(Path(self.file_path)))

    def save_thumbnail(self, file_path):
        if not self.png_image:
            self.load_png()
        self.png_image.save(file_path)

    def return_max_resolution(self):
        if not self.png_image:
            self.load_png()
        return self.png_image.size

    def return_nr_of_layers(self):
        raise NotImplementedError

    def return_layer_resolution(self, layer_nr):
        raise NotImplementedError

    def return_downsamples(self):
        raise NotImplementedError

    def extract_xth_layer(self, layer_nr):
        resized_image = self.png_image.resize((800, 600), Image.ANTIALIAS)
        output = ImageQt.ImageQt(resized_image)
        return output

    def return_metadata(self):
        if not self.png_image:
            self.load_png()
        return dict(self.png_image.getexif())


if __name__ == "__main__":
    pass
